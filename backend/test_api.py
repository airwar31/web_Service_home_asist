#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API
"""

import requests
import json

BASE_URL = 'http://localhost:5000/api'

def test_api_status():
    """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ API"""
    try:
        response = requests.get(f'{BASE_URL}/status')
        print(f"API Status: {response.status_code}")
        print(f"Response: {response.json()}")
        return response.status_code == 200
    except Exception as e:
        print(f"Error testing API status: {e}")
        return False

def test_get_devices():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    try:
        response = requests.get(f'{BASE_URL}/devices')
        print(f"Get Devices: {response.status_code}")
        print(f"Devices: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        return response.status_code == 200
    except Exception as e:
        print(f"Error getting devices: {e}")
        return False

def test_update_light():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–≤–µ—â–µ–Ω–∏—è"""
    try:
        data = {'status': True, 'brightness': 75}
        response = requests.post(f'{BASE_URL}/devices/light', json=data)
        print(f"Update Light: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        return response.status_code == 200
    except Exception as e:
        print(f"Error updating light: {e}")
        return False

def test_voice_command():
    """–¢–µ—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    try:
        data = {'command': '–≤–∫–ª—é—á–∏ —Å–≤–µ—Ç'}
        response = requests.post(f'{BASE_URL}/voice-command', json=data)
        print(f"Voice Command: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2, ensure_ascii=False)}")
        return response.status_code == 200
    except Exception as e:
        print(f"Error with voice command: {e}")
        return False

if __name__ == '__main__':
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart Home API...")
    print("=" * 50)
    
    tests = [
        ("API Status", test_api_status),
        ("Get Devices", test_get_devices),
        ("Update Light", test_update_light),
        ("Voice Command", test_voice_command)
    ]
    
    passed = 0
    for test_name, test_func in tests:
        print(f"\nüîç {test_name}:")
        if test_func():
            print("‚úÖ PASSED")
            passed += 1
        else:
            print("‚ùå FAILED")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(tests)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")